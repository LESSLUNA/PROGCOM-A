# -*- coding: utf-8 -*-
"""lesly juego

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OMvIAIzxUoRMxAWjp-R5iJ8qaUHo6ExW
"""

import json

nuevas_preguntas = {
    "Diversidad Sexual": [
        {
            "texto": "🌈 ¿Qué representa la bandera del arcoíris?",
            "opciones": {
                "a": "Un símbolo religioso",
                "b": "La diversidad sexual y de género",
                "c": "Una marca de ropa"
            },
            "respuesta_correcta": "b"
        }
    ],
    "ETS y Prevención": [
        {
            "texto": "🧪 ¿Qué es una ETS?",
            "opciones": {
                "a": "Una evaluación técnica",
                "b": "Una enfermedad de transmisión sexual",
                "c": "Una estrategia terapéutica"
            },
            "respuesta_correcta": "b"
        }
    ],
    "Relaciones Sanas": [
        {
            "texto": "💬 ¿Qué es fundamental en una relación sana?",
            "opciones": {
                "a": "Celos y control",
                "b": "Comunicación y respeto",
                "c": "Obediencia absoluta"
            },
            "respuesta_correcta": "b"
        }
    ],
    "Pubertad y Cambios": [
        {
            "texto": "🔄 ¿Qué ocurre en la pubertad?",
            "opciones": {
                "a": "Se detiene el crecimiento",
                "b": "Cambios físicos, emocionales y hormonales",
                "c": "Nada relevante"
            },
            "respuesta_correcta": "b"
        }
    ]
}

with open("nuevas_preguntas_sexualidad.json", "w", encoding="utf-8") as f:
    json.dump(nuevas_preguntas, f, indent=2, ensure_ascii=False)

print("✅ Nuevo archivo de preguntas creado.")

import time
import json
from abc import ABC, abstractmethod
from datetime import datetime

# --------------------
# CLASE ABSTRACTA BASE
# --------------------
class SalaBase(ABC):
    def __init__(self, nombre, preguntas, emoji):
        self.nombre = nombre
        self.preguntas = preguntas
        self.emoji = emoji

    def entrar(self):
        print(f"\n{self.emoji} Has entrado en la sala de {self.nombre.upper()} {self.emoji}")
        time.sleep(1)
        return self.evento()

    @abstractmethod
    def evento(self):
        pass


# --------------------
# CLASE CONCRETA
# --------------------
class SalaConcreta(SalaBase):
    def evento(self):
        aciertos = 0
        for i, p in enumerate(self.preguntas, 1):
            print(f"\n{i}️⃣ {p['texto']}")
            for clave, valor in p["opciones"].items():
                print(f"   {clave}) {valor}")
            respuesta = input("👉 Tu respuesta: ").strip().lower()
            correcta = p["respuesta_correcta"]
            if respuesta == correcta:
                print("✅ ¡Correcto!")
                aciertos += 1
            else:
                print("❌ Incorrecto.")
                print(f"👉 La respuesta correcta era: '{correcta}) {p['opciones'][correcta]}'")
            time.sleep(1)
        if aciertos >= 1:
            print(f"\n🎉 ¡Has conquistado la sala de {self.nombre}! 🎉")
            return True
        else:
            print(f"\n⚠️ No pasaste la sala de {self.nombre}. ¡Pero sigues en la aventura!")
            return False


# --------------------
# UTILIDADES
# --------------------
def cargar_preguntas_desde_json(archivo):
    with open(archivo, "r", encoding="utf-8") as f:
        return json.load(f)

def guardar_resultado(nombre, progreso):
    fecha = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    mensaje = (
        f"Jugador: {nombre}\n"
        f"Fecha: {fecha}\n"
        f"Salas superadas: {progreso}/4\n"
        f"{'-'*30}\n"
    )
    with open("resultados_juego.txt", "a", encoding="utf-8") as f:
        f.write(mensaje)
    print("💾 Resultado guardado en 'resultados_juego.txt'.")


# --------------------
# JUEGO PRINCIPAL
# --------------------
def iniciar_juego():
    print("🎮 Bienvenido al Juego de Educación Sexual (Versión 2) 🎮")
    nombre = input("📝 ¿Cuál es tu nombre, explorador(a)? ")
    print(f"\n👋 ¡Hola {nombre}! Tu misión es conquistar 4 salas del conocimiento.\n")
    time.sleep(2)

    preguntas_por_sala = cargar_preguntas_desde_json("nuevas_preguntas_sexualidad.json")

    salas = [
        SalaConcreta("Diversidad Sexual", preguntas_por_sala["Diversidad Sexual"], "🌈"),
        SalaConcreta("ETS y Prevención", preguntas_por_sala["ETS y Prevención"], "🧪"),
        SalaConcreta("Relaciones Sanas", preguntas_por_sala["Relaciones Sanas"], "💬"),
        SalaConcreta("Pubertad y Cambios", preguntas_por_sala["Pubertad y Cambios"], "🔄")
    ]

    progreso = 0
    for sala in salas:
        if sala.entrar():
            progreso += 1
        time.sleep(1.5)

    print("\n📊 RESULTADOS FINALES:")
    print(f"🏆 Salas superadas: {progreso}/4")

    if progreso == 4:
        print("\n🎊 ¡FELICIDADES! Has demostrado gran conocimiento sobre sexualidad 🎊")
    elif progreso >= 2:
        print("\n🚀 ¡Buen trabajo! Estás en camino de comprender tu sexualidad.")
    else:
        print("\n📚 ¡Sigue aprendiendo! La información es tu mejor aliada.")

    guardar_resultado(nombre, progreso)

# Ejecutar el juego
iniciar_juego()