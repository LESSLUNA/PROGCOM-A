# -*- coding: utf-8 -*-
"""progcom.a lambda

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZjvfIBpK5kAVmx7xVx-aWwctm_s3gNAl
"""

# Usando lambda para mostrar los números pares del 1 al 100
pares = list(filter(lambda x: x % 2 == 0, range(1, 101)))
print(pares)

import random

def adivinar_color():
    colores = ["rojo", "verde", "azul", "amarillo", "naranja", "morado", "rosa", "blanco", "negro", "gris"]

    print("Elige un color de los siguientes: ")
    print(colores)

    color_elegido = input("Escribe tu color elegido: ").lower()

    validar_color = lambda color: color in colores
    if not validar_color(color_elegido):
        print("El color elegido no está en la lista. Intenta de nuevo.")
        return

    intentos = 0
    colores_restantes = colores.copy()

    while intentos < 10 and colores_restantes:
        intento = random.choice(colores_restantes)
        print(f"Intento {intentos + 1}: ¿Es {intento}?")
        intentos += 1
        if intento == color_elegido:
            print(f"¡Adiviné! El color es {intento}.")
            break
        colores_restantes.remove(intento)

    if intentos == 10:
        print("No pude adivinar tu color en 10 intentos.")

adivinar_color()

def suma_digitos(numero):
    numero = abs(numero)

    return sum(map(lambda x: int(x), str(numero)))

numero = int(input("Introduce un número: "))

resultado = suma_digitos(numero)

print(f"La suma de los dígitos de {numero} es: {resultado}")

es_primo = lambda numero: numero > 1 and all(numero % i != 0 for i in range(2, int(numero ** 0.5) + 1))

numero = int(input("Introduce un número: "))

if es_primo(numero):
    print(f"{numero} es un número primo.")
else:
    print(f"{numero} no es un número primo.")

calcular_potencia = lambda base, exponente: 1 if exponente == 0 else base * calcular_potencia(base, exponente - 1) if exponente > 0 else 1 / calcular_potencia(base, -exponente)

base = float(input("Introduce la base: "))
exponente = int(input("Introduce el exponente: "))

resultado = calcular_potencia(base, exponente)

print(f"{base} elevado a {exponente} es: {resultado}")

mostrar_triangulo = lambda filas: [print('*' * i) for i in range(1, filas + 1)]

filas = int(input("Introduce el número de filas del triángulo: "))

mostrar_triangulo(filas)