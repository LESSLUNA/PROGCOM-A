# -*- coding: utf-8 -*-
"""progcom-a 26-30

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19DX7d9iy7RaUhopn2DLJWcq1w37LwEuS
"""

def mostrar_tablas_multiplicar():
    for i in range(1, 11):
        print(f"Tabla de multiplicar del {i}:")
        for j in range(1, 11):
            print(f"{i} x {j} = {i * j}")
        print()

mostrar_tablas_multiplicar()

mostrar_tablas_multiplicar = lambda: [print(f"Tabla de multiplicar del {i}:") or [print(f"{i} x {j} = {i * j}") for j in range(1, 11)] for i in range(1, 11)]
mostrar_tablas_multiplicar()

def encontrar_numeros_perfectos(n):
    perfectos = []
    for num in range(1, n + 1):
        suma_divisores = sum(i for i in range(1, num) if num % i == 0)
        if suma_divisores == num:
            perfectos.append(num)
    return perfectos
n = int(input("Introduce el valor de n: "))
perfectos = encontrar_numeros_perfectos(n)
print(f"Números perfectos hasta {n}: {perfectos}")

es_perfecto = lambda num: num == sum(i for i in range(1, num) if num % i == 0)
numeros_perfectos = lambda n: [num for num in range(1, n + 1) if es_perfecto(num)]
n = int(input("Introduce el valor de n: "))
print(f"Números perfectos hasta {n}: {numeros_perfectos(n)}")

def generar_diamante(filas):
    for i in range(1, filas + 1):
        print(" " * (filas - i) + "*" * (2 * i - 1))
    for i in range(filas - 1, 0, -1):
        print(" " * (filas - i) + "*" * (2 * i - 1))

filas = int(input("Introduce el número de filas para el diamante: "))
generar_diamante(filas)

generar_diamante_superior = lambda filas: [print(" " * (filas - i) + "*" * (2 * i - 1)) for i in range(1, filas + 1)]

generar_diamante_inferior = lambda filas: [print(" " * (filas - i) + "*" * (2 * i - 1)) for i in range(filas - 1, 0, -1)]

generar_diamante = lambda filas: [generar_diamante_superior(filas), generar_diamante_inferior(filas)]

filas = int(input("Introduce el número de filas para el diamante: "))
generar_diamante(filas)

def encontrar_numeros_armstrong(n):
    armstrong = []
    for num in range(1, n + 1):
        num_str = str(num)
        num_digitos = len(num_str)
        suma = sum(int(digit) ** num_digitos for digit in num_str)
        if suma == num:
            armstrong.append(num)
    return armstrong

n = int(input("Introduce el valor de n: "))
armstrong = encontrar_numeros_armstrong(n)
print(f"Números Armstrong hasta {n}: {armstrong}")

es_armstrong = lambda num: num == sum(int(digit) ** len(str(num)) for digit in str(num))

numeros_armstrong = lambda n: [num for num in range(1, n + 1) if es_armstrong(num)]

n = int(input("Introduce el valor de n: "))
print(f"Números Armstrong hasta {n}: {numeros_armstrong(n)}")

import time
reloj_digital = lambda segundos: [print(f"{(i // 3600):02}:{((i % 3600) // 60):02}:{(i % 60):02}") or time.sleep(1) for i in range(segundos + 1)]

segundos = int(input("Introduce el número de segundos para la simulación del reloj digital: "))
reloj_digital(segundos)